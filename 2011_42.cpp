#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int MidSearch(int* A, int* B, int x)
{
	// art简写为s，代表首位数字，end简写为d，代表末位数字，m代表中位数
	int s1 = 0, d1 = x - 1, m1, s2 = 0, d2 = x - 1, m2;  //0和4表示数组下标，m1=(s1+d1)/2，m2=(s2+d2)/2
	while (s1 != d1 || s2 != d2)  //循环结束条件是两个数组最后各剩下一个元素，即s1=d1和s2=d2
	{
		m1 = (s1 + d1) / 2;
		m2 = (s2 + d2) / 2;
		if (A[m1] == B[m2])
		{
			return A[m1];  //或者B[m2]，满足条件1
		}
		else if(A[m1] < B[m2])  //满足条件2
		{
			if ((s1 + d1) % 2 == 0)  //数组中元素个数为奇数（s1起始位置为0）
			{
				s1 = m1;  //舍弃数组A中间点m1之前的元素保留中间点m1
				d2 = m2;  //舍弃数组B中间点m2之后的元素保留中间点m2
			}
			else  //数组中元素个数为偶数，m1<m2
			{
				s1 = m1 + 1;  //舍弃数组A中间点m1之前的元素包括中间点m1
				d2 = m2;      //舍弃数组B中间点m2之后的元素保留中间点m2
			}
		}
		else  //A[m1]>B[m2])  //满足条件3（与条件2对称）		
		{
			if ((s1 + d1) % 2 == 0)  //数组中元素个数为奇数（s1起始位置为0）
			{
				d1 = m1;  //舍弃数组A中间点m1之后的元素保留中间点m1
				s2 = m2;  //舍弃数组B中间点m2之后的元素保留中间点m2
			}
			else  //数组中元素个数为偶数，m1<m2
			{
				d1 = m1;      //舍弃数组A中间点m1之后的元素保留中间点m1
				s2 = m2 + 1;  //舍弃数组B中间点m2之后的元素包括中间点m2
			}
		}
	}
	return A[s1] < B[s2] ? A[s1] : B[s2];  //此时s1=d1，s2=d2，题目取中位数11，即较小的值A[s1]
	//三目运算符，如果A[s1] < B[s2]表达式为真，取A[s1]，如果A[s1] > B[s2]表达式为假，取B[s2]
}
int main()
{
	int A[] = { 11,13,15,17,19 };
	int B[] = { 2,4,6,8,20 };
	int mid = MidSearch(A, B, 5);
	printf("mid=%d\n", mid);
}